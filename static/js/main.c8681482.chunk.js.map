{"version":3,"sources":["config.js","Utils/API/index.js","Utils/Cleaners/index.js","Components/QuizInstructions/QuizInstructions.js","Components/LandingPage/LandingPage.js","Components/ErrorPage/ErrorPage.js","Components/Questions/Questions.js","Components/QuestionCount/QuestionCount.js","Components/AnswerOption/AnswerOption.js","Components/QuizContainer/QuizContainer.js","Utils/API/quizQuestions.js","Components/Result/Result.js","Containers/Quiz/Quiz.js","Containers/App/App.js","Actions/characterActions.js","serviceWorker.js","Reducers/char-reducer.js","Reducers/index.js","index.js"],"names":["config","privateKey","publicKey","timeStamp","Date","now","toString","hash","md5","concat","fetchInfo","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","response","result","wrap","_context","prev","next","fetch","sent","status","Error","json","abrupt","stop","this","_x","apply","arguments","fetchAllCharacters","_ref2","_callee2","allCharacters","offset","newCharactersData","newCharacters","_context2","data","results","toConsumableArray","fetchAlternateStats","_ref3","_callee3","altCharacterStats","_context3","Cleaner","_this","classCallCheck","getCharacterData","characterData","describedChars","filterCharacters","characterArray","newCharArray","filter","character","description","cleanCharacterCollection","uncleanCollection","cleanCollection","map","name","id","siteURL","urls","cleanAltCollection","_callee4","uncleanAltCollection","modifiedCollection","_context4","filterAltStats","appearance","powerstats","imageURL","images","sm","matchTally","combineCharacterObjects","_callee5","array1","array2","newChars","_context5","reduce","char","newCharObj","forEach","altCharObj","objectSpread","push","cleanAltStats","_callee6","uncleanStats","_context6","_callee7","unfilteredStats","filteredStats","_context7","biography","publisher","API","QuizInstructions","react_default","createElement","className","NavLink","to","LandingPage","src","alt","ErrorPage","Question","text","QuestionCount","counter","total","AnswerOption","props","answerType","answerContent","answer","onAnswerSelected","type","checked","value","disabled","onChange","htmlFor","QuizContainer","answerOptions","question","questionId","questionTotal","Components_QuestionCount_QuestionCount","Questions_Questions","key","Components_AnswerOption_AnswerOption","content","quizQuestions","answers","Result","quizResult","characterMatch","intelligence","strength","speed","durability","power","combat","Quiz","_Component","possibleConstructorReturn","getPrototypeOf","call","handleAnswerSelected","e","setUserAnswer","target","state","length","setTimeout","setNextQuestion","setResults","getResults","handleCharacterMatch","characters","find","answersCount","blue","brown","green","other","blond","black","red","auburn","alternate","human","alien","spirit","mutant","cyborg","inherits","createClass","setState","defineProperty","answersCountKeys","keys","hairColor","toLowerCase","eyeColor","race","index","Math","floor","random","_this$state","Components_QuizContainer_QuizContainer","charMatch","Components_Result_Result","renderResult","renderQuizContainer","Component","connect","cleaner","App","_componentDidMount","addCharacters","BrowserRouter","Switch","Route","exact","path","component","dispatch","Boolean","window","location","hostname","match","charactersReducer","undefined","action","rootReducer","combineReducers","devTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","renderedApp","es","Containers_App_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8681482.chunk.js","sourcesContent":["var config = {\n  privateKey : 'f1b690b8e89d7f112c6f33f956693b2f91d93400',\n  publicKey : 'a4d95911b60999871aaed8a8c43823f6',\n}\n\nexport default config;","import md5 from 'md5'\nimport config from '../../config'\n\nconst timeStamp = Date.now().toString()\nconst hash = md5(`${timeStamp}${config.privateKey}${config.publicKey}`)\n\nexport const fetchInfo = async (url) => {\n  const response = await fetch(url)\n  if (response.status >= 300) {\n    throw new Error('Fetch has failed')\n  } else {\n    const result = await response.json() \n    return result\n  }\n}\n\nexport const fetchAllCharacters = async () => {\n  let allCharacters = []\n  let offset = 0\n\n  while (offset < 1500) {\n    const url = `http://gateway.marvel.com/v1/public/characters?limit=50&offset=${offset}&ts=${timeStamp}&apikey=${config.publicKey}&hash=${hash}`\n    const newCharactersData = await fetchInfo(url)\n    const newCharacters = newCharactersData.data.results\n    allCharacters = [...allCharacters, ...newCharacters]\n    offset += 50;\n  }\n  return allCharacters\n}\n\nexport const fetchAlternateStats = async () => {\n  const url = 'https://cdn.rawgit.com/akabab/superhero-api/0.2.0/api/all.json'\n  const altCharacterStats = await fetchInfo(url)\n  return altCharacterStats\n}\n","import * as API from '../API/'\n\nclass Cleaner {\n  constructor() {\n    this.fetchAllCharacters = API.fetchAllCharacters\n    this.fetchAlternateStats = API.fetchAlternateStats\n  }\n\n  getCharacterData = async () => {\n    const characterData = await this.fetchAllCharacters()\n    const describedChars = await this.filterCharacters(characterData)\n    return describedChars\n  }\n\n  filterCharacters = async (characterArray) => {\n    const newCharArray = characterArray.filter(character => {\n      return character.description !== \"\"\n    })\n    return newCharArray\n  }\n\n  cleanCharacterCollection = async () => {\n    const uncleanCollection =  await this.getCharacterData()\n    const cleanCollection = uncleanCollection.map(character => {\n      return ({\n        name: character.name,\n        id: character.id,\n        description: character.description,\n        siteURL: character.urls[0].url,\n      })\n    })\n    return cleanCollection\n  }\n\n  cleanAltCollection = async () => {\n    const uncleanAltCollection = await this.filterAltStats()\n    const modifiedCollection = uncleanAltCollection.map(character => {\n      return ({\n        name: character.name,\n        appearance: character.appearance,\n        powerstats: character.powerstats,\n        imageURL: character.images.sm,\n        matchTally: 0\n      })\n    })\n    return modifiedCollection\n  }\n\n  combineCharacterObjects = async () => {\n    const array1 = await this.cleanCharacterCollection()\n    const array2 = await this.cleanAltCollection()\n    const newChars = array1.reduce((newCharArray, char) => {\n      let newCharObj;\n      array2.forEach(altCharObj => {\n        if(char.name === altCharObj.name) {\n          newCharObj = {...char, ...altCharObj}\n          newCharArray.push(newCharObj)\n        } \n      })\n      return newCharArray\n    }, [])\n    return newChars\n  }\n\n  cleanAltStats = async () => {\n    const uncleanStats = await this.fetchAlternateStats()\n    return uncleanStats\n  }\n\n  filterAltStats = async () => {\n    const unfilteredStats = await this.cleanAltStats()\n    const filteredStats = unfilteredStats.filter((char) => {\n      return char.biography.publisher === 'Marvel Comics'\n    })\n    return filteredStats\n  }\n}\n\nexport default Cleaner\n\n\n\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport './QuizInstructions.css'\n\nconst QuizInstructions = () => {\n  return (\n    <div>\n      <h1 className=\"directions-title\">Take the quiz to find your <span>Spirit Superhero</span>!</h1>\n      <div className=\"directions-container\">\n        <p className=\"directions\">We all know that no one in real life looks like a Marvel Comics superhero, but we all feel like one inside. Answer the questions in our brief quiz to choose your Spirit Superhero!</p>\n\n      <NavLink\n        to='/quiz'\n        className='quiz-nav'>\n        <h3>Match Me!</h3>\n      </NavLink>\n      </div>\n    </div>\n  )\n}\n\nexport default QuizInstructions","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport './LandingPage.css'\n\nconst LandingPage = () => {\n  return (\n    <div className=\"wrapper\">\n      <div className=\"logo-container\">\n        <h1 className=\"marvel\">MARVEL</h1>\n        <h2 className=\"match\">MATCH</h2>\n      </div>\n      <img className=\"gif\" src=\"../../assets/Images/comic-flip.gif\" alt=\"\"/>\n      <div className=\"links-container\">\n        <NavLink \n          to='/quiz-land'\n          className='landing-nav'>\n          <h3 className=\"link-text\">Take the quiz!</h3>\n        </NavLink>\n      </div>\n    </div>\n  )\n}\n\nexport default LandingPage","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport './ErrorPage.css'\n\nconst ErrorPage = () => {\n  return (\n    <div className=\"error-wrapper\">\n      <div className='warning-container'>\n        <h1>404: I AM GROOT!</h1>\n        <p className='translation'>Translation: Not quite sure where you were headed, friend, but this path leads to Knowhere and you'll never survive the trip!</p>\n      </div>\n      <NavLink to='/quiz-land' className='error-nav'>\n        <p className='home-link'>Back to Safety!</p>\n      </NavLink>\n    </div>\n  )\n}\n\nexport default ErrorPage","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Questions.css'\n\nconst Question = ({ text }) => {\n  return (\n    <h2 className=\"question\">{text}</h2>\n  )\n}\n\nQuestion.propTypes = {\n  text: PropTypes.string\n}\n\nexport default Question","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './QuestionCount.css'\n\nconst QuestionCount = ({ counter, total }) => {\n  return (\n    <div className=\"question-count\">\n      <h6>Question <span>{counter}</span> of <span>{total}</span></h6>\n    </div>\n  )\n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number,\n  total: PropTypes.number\n}\n\nexport default QuestionCount\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './AnswerOption.css'\n\nconst AnswerOption = (props) => {\n  const { answerType, answerContent, answer, onAnswerSelected } = props\n  return (\n    <li>\n      <input\n        type='radio'\n        className='radio-button'\n        name='radio-group'\n        checked={answerType === answer}\n        id={answerType}\n        value={answerType}\n        disabled={answer}\n        onChange={onAnswerSelected}\n      />\n      <label className='radio-label' htmlFor={answerType}>\n        {answerContent}\n      </label>\n    </li>\n  )\n}\n\nAnswerOption.propTypes = {\n  answerType: PropTypes.string,\n  answerContent: PropTypes.string,\n  answer: PropTypes.string,\n  onAnswerSelected: PropTypes.func,\n}\n\nexport default AnswerOption\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Question from '../Questions/Questions'\nimport QuestionCount from '../QuestionCount/QuestionCount'\nimport AnswerOption from '../AnswerOption/AnswerOption'\nimport './QuizContainer.css'\n\nconst QuizContainer = (props) => {\n  const {\n    answer,\n    answerOptions,\n    question,\n    questionId,\n    questionTotal,\n    onAnswerSelected,\n  } = props\n  \n  const renderAnswerOptions = (key) => {\n    return (\n      <AnswerOption\n          key={key.content}\n          answerContent={key.content}\n          answerType={key.type}\n          answer={answer}\n          questionId={questionId}\n          onAnswerSelected={onAnswerSelected}\n      />\n    )\n  }\n\n  return (\n    <div className='quiz-container'>\n      <QuestionCount\n        counter={questionId}\n        total={questionTotal}\n      />\n      <Question text={question} />\n      <ul className='answer-options'>\n        {answerOptions.map(renderAnswerOptions)}\n      </ul>\n    </div>\n  )\n}\n\nQuizContainer.propTypes = {\n  answer: PropTypes.string,\n  answerOptions: PropTypes.array,\n  question: PropTypes.string,\n  questionId: PropTypes.number,\n  questionTotal: PropTypes.number,\n  onAnswerSelected: PropTypes.func\n}\n\nexport default QuizContainer\n\n\n","const quizQuestions = [\n  {\n    question: \"What color are your eyes?\",\n    answers: [\n      {\n        type: \"blue\",\n        content: \"Blue\"\n      },\n      {\n        type: \"brown\",\n        content: \"Brown\"\n      },\n      {\n        type: \"green\",\n        content: \"Green\"\n      },\n      {\n        type: \"other\",\n        content: \"Other\"\n      },\n    ]\n  },\n  {\n    question: \"What color is your hair?\",\n    answers: [\n      {\n        type: \"blond\",\n        content: \"Blonde\"\n      },\n      {\n        type: \"black\",\n        content: \"Black\"\n      },\n      {\n        type: \"red\",\n        content: \"Red\"\n      },\n      {\n        type: \"auburn\",\n        content: \"Brown\"\n      },\n      {\n        type: \"alternate\",\n        content: \"I don't even know anymore!\"\n      }\n    ]\n  },\n  {\n    question: \"How tall are you?\",\n    answers: [\n      {\n        type: \"tall\",\n        content: \"I'm pretty tall\"\n      },\n      {\n        type: \"short\",\n        content: \"I'm kinda short\"\n      },\n      {\n        type: \"average\",\n        content: \"I think I'm average\"\n      },\n    ]\n  },\n  {\n    question: \"With which race do you most identify?\",\n    answers: [\n      {\n        type: \"human\",\n        content: \"I'm human!\"\n      },\n      {\n        type: \"alien\",\n        content: \"I'm alien!\"\n      },\n      {\n        type: \"mutant\",\n        content: \"I'm a mutant!\"\n      },\n      {\n        type: \"cyborg\",\n        content: \"I'm a cyborg!\"\n      },\n      {\n        type: \"spirit\",\n        content: \"I've transcended physical form!\"\n      },\n    ]\n  }\n];\n\nexport default quizQuestions;\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Result.css'\n\nconst Result = ({ quizResult, characterMatch }) => {\n  return (\n    <div className='result'>\n      <h1 className=\"match-heading\">You match with...</h1>\n      <h2 className=\"match-name\">{quizResult}</h2>\n      <img src={characterMatch.imageURL} alt={characterMatch.name}/>\n      <p className=\"char-description\">{characterMatch.description}</p>\n      <ul className=\"bar-graph\">\n        <li className=\"red\">Intelligence: {characterMatch.powerstats.intelligence}</li>\n        <li className=\"orange\">Strength: {characterMatch.powerstats.strength}</li>\n        <li className=\"yellow\">Speed: {characterMatch.powerstats.speed}</li>\n        <li className=\"green\">Durability: {characterMatch.powerstats.durability}</li>\n        <li className=\"blue\">Power: {characterMatch.powerstats.power}</li>\n        <li className=\"violet\">Combat: {characterMatch.powerstats.combat}</li>\n      </ul>\n    </div>\n  )\n}\n\nResult.propTypes = {\n  quizResult: PropTypes.string\n}\n\nexport default Result\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport QuizContainer from '../../Components/QuizContainer/QuizContainer'\nimport quizQuestions from '../../Utils/API/quizQuestions'\nimport Result from '../../Components/Result/Result'\n\nexport class Quiz extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {\n        blue: 0,\n        brown: 0,\n        green: 0,\n        other: 0,\n        blond: 0,\n        black: 0,\n        red: 0,\n        auburn: 0,\n        alternate: 0,\n        human: 0,\n        alien: 0,\n        spirit: 0,\n        mutant: 0,\n        cyborg: 0\n      },\n      result: ''\n    }\n  }\n\n  componentWillMount() {\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: quizQuestions[0].answers\n    })\n  }\n\n  handleAnswerSelected = (e) => {\n    this.setUserAnswer(e.target.value)\n    if(this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 400)\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 400)\n    }\n  }\n\n  setUserAnswer(answer) {\n    this.setState({\n      answersCount: {\n        ...this.state.answersCount, \n        [answer]: this.state.answersCount[answer]+=1\n      },\n      answer: answer\n    })\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1\n    const questionId = this.state.questionId + 1\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: '',\n    })\n  }\n\n  getResults() {\n    const { answersCount } = this.state\n    const answersCountKeys = Object.keys(answersCount)\n    const possibleResults = this.props.characters.filter((character) => {\n      answersCountKeys.forEach((key) => {\n        if(character.appearance.hairColor && key === character.appearance.hairColor.toLowerCase() && answersCount[key] !== 0) {\n          character.matchTally++\n        } else if(character.appearance.eyeColor && key === character.appearance.eyeColor.toLowerCase() && answersCount[key] !== 0) {\n          character.matchTally++\n        } else if(character.appearance.race && key === character.appearance.race.toLowerCase() && answersCount[key] !== 0) {\n          character.matchTally++\n        }\n      })\n      return character.matchTally !== 0\n    })\n    return possibleResults\n  }\n\n  setResults(result) {\n    const index = Math.floor(Math.random() * Math.floor(result.length))\n    if (result.length >= 1) {\n      this.setState({ result: result[index].name })\n    } else {\n      this.setState({ result: 'Undetermined' })\n    }\n  }\n\n  handleCharacterMatch = () => {\n    const charMatch = this.props.characters.find((character) => {\n      return character.name === this.state.result\n    })\n    return charMatch\n  }\n\n  renderQuizContainer() {\n    const { answer, answerOptions, questionId, question } = this.state\n    return (\n      <div>\n        <h1>Take the Quiz and match a Marvel Character!</h1>\n        <QuizContainer \n          answer={answer}\n          answerOptions={answerOptions}\n          questionId={questionId}\n          question={question}\n          questionTotal={quizQuestions.length}\n          onAnswerSelected={this.handleAnswerSelected}\n        />\n      </div>\n    )\n  }\n\n  renderResult() {\n    const charMatch = this.handleCharacterMatch()\n    return (\n      <Result \n        quizResult={this.state.result}\n        characterMatch={charMatch} \n      />\n    )\n  }\n\n  render () {\n    return (\n      <div className=\"quiz-wrapper\" key={this.state.questionId}>\n        {this.state.result ? this.renderResult() : this.renderQuizContainer()}\n      </div>\n    )\n  }\n}\n\nexport const mapStateToProps = state => ({\n  characters: state.characters\n})\n\nQuiz.propTypes = {\n  characters: PropTypes.array\n}\n\nexport default connect(mapStateToProps, null)(Quiz)\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addCharacters } from '../../Actions/characterActions';\nimport './App.css';\nimport Cleaner from '../../Utils/Cleaners'\nimport QuizInstructions from '../../Components/QuizInstructions/QuizInstructions'\nimport LandingPage from '../../Components/LandingPage/LandingPage'\nimport ErrorPage from '../../Components/ErrorPage/ErrorPage'\nimport Quiz from '../Quiz/Quiz'\n\nconst cleaner = new Cleaner()\n\nexport class App extends Component {\n  async componentDidMount() {\n    const characterData = await cleaner.combineCharacterObjects()\n    this.props.addCharacters(characterData)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Switch>\n            <Route exact path='/quiz-land' component={QuizInstructions} />\n            <Route exact path='/quiz' component={Quiz} />\n            <Route path='/' exact component={LandingPage} />\n            <Route component={ErrorPage} />\n          </Switch>\n        </BrowserRouter>\n        <footer>\n          <p>\"Data provided by Marvel. © 2014 Marvel\"</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport const mapStateToProps = (state) => ({\n  characters: state.characters\n})\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    addCharacters: characterData => {\n      dispatch(addCharacters(characterData))\n    }\n  }\n}\n\nApp.propTypes = {\n  characters: PropTypes.array,\n  addCharacters: PropTypes.func,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const addCharacters = (characterArray) => {\n  return {\n    type: 'ADD_CHARACTERS',\n    characters: characterArray\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const charactersReducer = (state=[], action) => {\n  switch (action.type) {\n    case 'ADD_CHARACTERS':\n      return [...state, ...action.characters]\n    default:\n      return state\n  }\n}\n\nexport default charactersReducer","import { combineReducers } from 'redux'\nimport charactersReducer from './char-reducer'\n// import usersReducer from './users-reducer'\n\nconst rootReducer = combineReducers({\n  characters: charactersReducer,\n  // users: usersReducer\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './Containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './Reducers/'\n\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\nconst store = createStore(rootReducer, devTools)\nconst renderedApp = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n)\n\nReactDOM.render(renderedApp, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}